name: Docker 构建和发布

on:
  push:
    branches:
      - main
  schedule:
    - cron: "13 3 * * *"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: 检出仓库
        uses: actions/checkout@v2

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: 登录到 Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 获取最新版本
        id: fetch-version
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/dushixiang/next-terminal/releases/latest | jq -r '.tag_name')
          CURRENT_VERSION=$(cat version)
          if [ "$LATEST_VERSION" = "$CURRENT_VERSION" ]; then
            echo "版本匹配，跳过构建。"
            echo "::set-output name=skip_build::true"
          else
            echo "::set-output name=latest_version::$LATEST_VERSION"
          fi

      - name: 比较配置文件
        id: compare-config
        run: |
          CONFIG_FILES=("sql/config.yaml")
          REMOTE_URLS=("https://f.typesafe.cn/next-terminal/config.yaml")
          SKIP_BUILD=false

          for i in "${!CONFIG_FILES[@]}"; do
            LOCAL_FILE=${CONFIG_FILES[$i]}
            REMOTE_FILE=$(curl -s ${REMOTE_URLS[$i]})
            LOCAL_CONTENT=$(cat $LOCAL_FILE)

            if [ "$LOCAL_CONTENT" != "$REMOTE_FILE" ]; then
              echo "配置文件 ${LOCAL_FILE} 与远程文件不匹配，跳过构建。"
              SKIP_BUILD=true
              break
            fi
          done

          if [ "$SKIP_BUILD" = true ]; then
            echo "::set-output name=skip_build::true"
          fi

      - name: 构建并推送 Docker 镜像（latest、带版本号、带版本号和时间戳）
        if: steps.fetch-version.outputs.skip_build != 'true' && steps.compare-config.outputs.skip_build != 'true'
        run: |
          LATEST_VERSION=${{ steps.fetch-version.outputs.latest_version }}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          docker buildx build --platform linux/amd64,linux/arm64 -t aaronlee/next-terminal:latest --push .
          docker buildx build --platform linux/amd64,linux/arm64 -t aaronlee/next-terminal:${{ steps.fetch-version.outputs.latest_version }} --push .
          docker buildx build --platform linux/amd64,linux/arm64 -t aaronlee/next-terminal:${{ steps.fetch-version.outputs.latest_version }}-${TIMESTAMP} --push .

      - name: 更新版本文件并推送到 GitHub
        if: steps.fetch-version.outputs.skip_build != 'true' && steps.compare-config.outputs.skip_build != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_VERSION=${{ steps.fetch-version.outputs.latest_version }}
          echo $LATEST_VERSION > version
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git add version
          current_time=$(TZ='Asia/Shanghai' date "+%Y-%m-%d %H:%M:%S")
          git commit -m "版本更新为 $LATEST_VERSION - 北京时间: $current_time"
          git push origin main

      - name: 写入时间到文件
        run: echo $(date +"%Y-%m-%d %H:%M:%S") > time

      - name: 提交和推送时间更改
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add time
          current_time=$(TZ='Asia/Shanghai' date "+%Y-%m-%d %H:%M:%S")
          git commit -m "运行时间 - 北京时间: $current_time"
          git push origin main

