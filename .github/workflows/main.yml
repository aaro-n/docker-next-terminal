name: Docker Build and Publish

on:
  push:
    branches:
      - main
  schedule:
    - cron: "33 3 26 * *"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker
        uses: docker/setup-docker@v1

      - name: Fetch latest version
        id: fetch-version
        run: |
          LATEST_VERSION=$(curl -s https://api.github.com/repos/dushixiang/next-terminal/releases/latest | jq -r '.tag_name')
          CURRENT_VERSION=$(cat version)
          if [ "$LATEST_VERSION" = "$CURRENT_VERSION" ]; then
            echo "Versions match. Skipping build."
            exit 1
          else
            echo "::set-output name=latest_version::$LATEST_VERSION"
          fi

      - name: Build and push Docker image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        run: |
          docker build -t aaronlee/next-terminal:latest .
          docker login -u $DOCKER_USERNAME -p $DOCKERHUB_TOKEN
          docker push aaronlee/next-terminal:latest

      - name: Update version file and push to GitHub
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LATEST_VERSION=${{ steps.fetch-version.outputs.latest_version }}
          echo $LATEST_VERSION > version
          git config user.email "your-email@example.com"
          git config user.name "Your Name"
          git add version
          git commit -m "Update version to $LATEST_VERSION"
          git push origin master

